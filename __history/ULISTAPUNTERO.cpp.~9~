//---------------------------------------------------------------------------
#pragma hdrstop
#include "ULISTAPUNTERO.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

Direccion ListaP::primero(){
	if (vacia)
		throw out_of_range("La lista está vacía");

	return PtrElementos;
}

Direccion ListaP::fin(){
	if (vacia)
		throw out_of_range("La lista está vacía");

	Direccion x = PtrElementos;
	Direccion ptrfin = x;
	while (x->sig != nullptr){
		ptrfin = x;
		x = x->sig;
	}
	return ptrfin;
}

void ListaP::inserta(Direccion p, TipoElemento elemento) {
	Direccion x = new Nodo;
	if (x == nullptr) {
		throw bad_alloc(); // Lanzar una excepción en caso de falla en la asignación de memoria
	} else {
	// Si la asignación de memoria fue exitosa, continuamos con la inserción del nodo
	x->elementos = elemento;
	x->sig = nullptr;
		if (vacia) {
			PtrElementos = x;
			longitud = 1;
		} else {
		longitud++;
			if (p == primero()) {
				x->sig = p;
				PtrElementos = x;
			} else {
				Direccion ant = anterior(p);
				ant->sig = x;
				x->sig = p;
			}
		}
	}
}

void ListaP::inserta_primero(TipoElemento elemento){
	Direccion x = new Nodo;
	if (x != nullptr) {
		x->elementos = elemento;
		x->sig = PtrElementos;
		longitud++;
		PtrElementos = x;
	}else{
		throw bad_alloc(); // Lanzar una excepción en caso de falla en la asignación de memoria
    }
}
