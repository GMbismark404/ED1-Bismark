//---------------------------------------------------------------------------

#pragma hdrstop

#include "ULISTAVECTOR.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
ListaV::ListaV(){
	longitud = 0;
}

Direccion ListaV::fin(){
	if (vacia()){
			throw std::out_of_range("La lista está vacía");
	}else{
		return longitud - 1;
    }
}

Direccion ListaV::primero(){
	if (vacia())
		throw std::out_of_range("La lista está vacía");

	return 0;
}

Direccion ListaV::siguiente(Direccion p){
	if (vacia())
		throw std::out_of_range("La lista está vacía");

	if (p == longitud)
		throw std::out_of_range("La dirección es incorrecta");

	return (p+1);
}

Direccion ListaV::anterior(Direccion p){
	if (vacia())
		throw std::out_of_range("La lista está vacía");

	if (p == 0)
		throw std::out_of_range("La dirección es incorrecta");

	return (p-1);
}

void ListaV::inserta(Dirreccion p, TipoElemento elemento){
	if (longitud == MAX) {
		throw std::out_of_range("La lista está llena");
		exit(1);
	}
	if (!(p>=0 && p<=longitud)) {
		throw std::out_of_range("La dirección es incorrecta");
		exit(1);
	}
	for (int i = longitud; i > p; i--) {
		elementos[i] = elementos[i - 1];
	}
	elementos[p] = elemento;
	longitud++;
}
