//---------------------------------------------------------------------------

#pragma hdrstop

#include "ULISTAVECTOR.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

Direccion ListaV::fin(){
	if (vacia()){
			throw std::out_of_range("La lista está vacía");
	}else{
		return longitud - 1;
    }
}

Direccion ListaV::primero(){
	if (vacia())
		throw std::out_of_range("La lista está vacía");

	return 0;
}

Direccion ListaV::siguiente(Direccion p){
	if (vacia())
		throw std::out_of_range("La lista está vacía");

	if (p == longitud)
		throw std::out_of_range("La dirección es incorrecta");

	return (p+1);
}

Direccion ListaV::anterior(Direccion p){
	if (vacia())
		throw std::out_of_range("La lista está vacía");

	if (p == 0)
		throw std::out_of_range("La dirección es incorrecta");

	return (p-1);
}

TipoElemento ListaV::recupera(Direccion p){
    if (vacia())
		throw std::out_of_range("La lista está vacía");

	if (!(p>=0 && p<=longitud))
		throw std::out_of_range("La dirección es incorrecta");

	return elementos[p];
}

void ListaV::inserta(Direccion p, TipoElemento elemento){
	if (longitud == MAX)
		throw std::out_of_range("La lista está llena");

	if (!(p>=0 && p<=longitud))
		throw std::out_of_range("La dirección es incorrecta");

	for (int i = longitud; i > p; i--)
		elementos[i] = elementos[i - 1];

	elementos[p] = elemento;
	longitud++;
}

void ListaV::inserta_primero(TipoElemento elemento){
    if (longitud == MAX)
		throw std::out_of_range("La lista está llena");

	for (int i = longitud; i > 0; i--)
		elementos[i] = elementos[i - 1];

	elementos[0] = elemento;
	longitud++;
}

void ListaV::inserta_ultimo(TipoElemento elemento){
	if (longitud == MAX)
		throw std::out_of_range("La lista está llena");

	longitud++;
	elementos[longitud] = elemento;
}

void ListaV::suprime(Direccion p){
	if (vacia())
		throw std::out_of_range("La lista está vacía");

	if (!(p>=0 && p<longitud))
		throw std::out_of_range("La dirección es incorrecta");

	for (int i = p; i < longitud - 1; i++)
		elementos[i] = elementos[i + 1];

	longitud--;
}

void ListaV::modifica(Direccion p,TipoElemento elemento){
    if (vacia())
		throw std::out_of_range("La lista está vacía");

	if (!(p>=0 && p<longitud))
		throw std::out_of_range("La dirección es incorrecta");

    elementos[p] = elemento;
}

void ListaV::imprimirLista(const ListaV& lista){
	if (vacia()) {
        std::cout << "La lista está vacía." << std::endl;
		return;
	}

    std::cout << "Elementos de la lista:" << std::endl;
	for (int i = 0; i < longitudListav(); ++i) {
        std::cout << recupera(i) << " ";
    }
	std::cout << std::endl;
}
